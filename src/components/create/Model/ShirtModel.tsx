/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { CanvasTexture } from 'three';
import { useFrame, useThree } from '@react-three/fiber';

export function Model(props: any) {
  const { color } = props;
  const { gl } = useThree();
  const group = useRef();

  const canvas: HTMLCanvasElement | null = document.querySelector('.canvas-front.lower-canvas');
  const canvasBack: HTMLCanvasElement | null = document.querySelector('.canvas-back.lower-canvas');
  const canvasLeft: HTMLCanvasElement | null = document.querySelector('.canvas-left.lower-canvas');
  const canvasRight: HTMLCanvasElement | null = document.querySelector(
    '.canvas-right.lower-canvas',
  );

  const ctx = canvas?.getContext('2d');
  const ctxBack = canvasBack?.getContext('2d');
  const ctxLeft = canvasLeft?.getContext('2d');
  const ctxRight = canvasRight?.getContext('2d');

  const texture = new CanvasTexture(ctx?.canvas as HTMLCanvasElement);
  const textureBack = new CanvasTexture(ctxBack?.canvas as HTMLCanvasElement);
  const textureLeft = new CanvasTexture(ctxLeft?.canvas as HTMLCanvasElement);
  const textureRight = new CanvasTexture(ctxRight?.canvas as HTMLCanvasElement);

  texture.flipY = false;
  texture.anisotropy = gl.capabilities.getMaxAnisotropy();
  texture.needsUpdate = true;

  textureBack.flipY = false;
  textureBack.anisotropy = gl.capabilities.getMaxAnisotropy();
  textureBack.needsUpdate = true;

  textureLeft.flipY = false;
  textureLeft.anisotropy = gl.capabilities.getMaxAnisotropy();
  textureLeft.needsUpdate = true;

  textureRight.flipY = false;
  textureRight.anisotropy = gl.capabilities.getMaxAnisotropy();
  textureRight.needsUpdate = true;

  useFrame(() => {
    // console.log(editor?.canvas.toJSON());
    texture.needsUpdate = true;
    textureBack.needsUpdate = true;
    textureLeft.needsUpdate = true;
    textureRight.needsUpdate = true;
  });

  const { nodes, materials, animations } = useGLTF('/models/Segmented.glb') as any;
  // eslint-disable-next-line
  const { actions } = useAnimations(animations, group);

  // useEffect(() => {
  //   actions['HG_WendyAction.001']?.play();
  // });

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.spine} />
          <skinnedMesh
            name="HG_Eyes001"
            geometry={nodes.HG_Eyes001.geometry}
            material={materials['.HG_Eyes_Inner']}
            skeleton={nodes.HG_Eyes001.skeleton}
          />
          <skinnedMesh
            name="HG_Skinny_Jeans_Female001"
            geometry={nodes.HG_Skinny_Jeans_Female001.geometry}
            material={materials['.HG_Skinny_Jeans.008']}
            skeleton={nodes.HG_Skinny_Jeans_Female001.skeleton}
          />
          <skinnedMesh
            name="HG_TeethLower001"
            geometry={nodes.HG_TeethLower001.geometry}
            material={materials['.HG_Teeth']}
            skeleton={nodes.HG_TeethLower001.skeleton}
          />
          <skinnedMesh
            name="HG_TeethUpper001"
            geometry={nodes.HG_TeethUpper001.geometry}
            material={materials['.HG_Teeth']}
            skeleton={nodes.HG_TeethUpper001.skeleton}
          />
          <group name="HG_TSHIRT_Female001">
            <skinnedMesh
              name="HG_TSHIRT_Female001_1"
              geometry={nodes.HG_TSHIRT_Female001_1.geometry}
              material={materials.Shirt}
              skeleton={nodes.HG_TSHIRT_Female001_1.skeleton}
            >
              <meshStandardMaterial color={color} attach="material" />
            </skinnedMesh>

            <skinnedMesh
              name="HG_TSHIRT_Female001_2"
              geometry={nodes.HG_TSHIRT_Female001_2.geometry}
              material={materials['Shirt rings']}
              skeleton={nodes.HG_TSHIRT_Female001_2.skeleton}
            />
          </group>

          {/* shirt front */}
          <skinnedMesh
            name="HG_TSHIRT_Female002"
            geometry={nodes.HG_TSHIRT_Female002.geometry}
            material={materials.Front}
            skeleton={nodes.HG_TSHIRT_Female002.skeleton}
          >
            <meshStandardMaterial attach="material" map={texture}>
              <canvasTexture attach="map" image={canvas} />
            </meshStandardMaterial>
          </skinnedMesh>
          {/* shirt front ends */}

          {/* shirt back */}
          <skinnedMesh
            name="HG_TSHIRT_Female003"
            geometry={nodes.HG_TSHIRT_Female003.geometry}
            material={materials.Back}
            skeleton={nodes.HG_TSHIRT_Female003.skeleton}
          >
            <meshStandardMaterial attach="material" map={textureBack}>
              <canvasTexture attach="map" image={canvasBack} />
            </meshStandardMaterial>
          </skinnedMesh>
          {/* shirt back ends */}

          {/* shirt right hand */}
          <skinnedMesh
            name="HG_TSHIRT_Female004"
            geometry={nodes.HG_TSHIRT_Female004.geometry}
            material={materials.Arm}
            skeleton={nodes.HG_TSHIRT_Female004.skeleton}
          >
            <meshStandardMaterial attach="material" map={textureRight}>
              <canvasTexture attach="map" image={canvasRight} />
            </meshStandardMaterial>
          </skinnedMesh>
          {/* shirt right hand ends */}

          <skinnedMesh
            name="HG_TSHIRT_Female005"
            geometry={nodes.HG_TSHIRT_Female005.geometry}
            material={materials['Arm 2']}
            skeleton={nodes.HG_TSHIRT_Female005.skeleton}
          >
            <meshStandardMaterial attach="material" map={textureLeft}>
              <canvasTexture attach="map" image={canvasLeft} />
            </meshStandardMaterial>
          </skinnedMesh>

          <skinnedMesh
            name="HG_Body001"
            geometry={nodes.HG_Body001.geometry}
            material={materials['.Human']}
            skeleton={nodes.HG_Body001.skeleton}
            morphTargetDictionary={nodes.HG_Body001.morphTargetDictionary}
            morphTargetInfluences={nodes.HG_Body001.morphTargetInfluences}
          />
          <skinnedMesh
            name="HG_Suede_Sneaker001"
            geometry={nodes.HG_Suede_Sneaker001.geometry}
            material={materials['.HG_Suede_Sneaker.001']}
            skeleton={nodes.HG_Suede_Sneaker001.skeleton}
            morphTargetDictionary={nodes.HG_Suede_Sneaker001.morphTargetDictionary}
            morphTargetInfluences={nodes.HG_Suede_Sneaker001.morphTargetInfluences}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/models/Segmented.glb');
